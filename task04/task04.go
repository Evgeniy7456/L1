package main

import (
	"context"
	"fmt"
	"os/signal"
	"sync"
	"syscall"
)

/*
Задание 4

Реализовать постоянную запись данных в канал (главный поток). Реализовать набор из N воркеров, которые читают
произвольные данные из канала и выводят в stdout. Необходима возможность выбора количества воркеров при старте.

Программа должна завершаться по нажатию Ctrl+C. Выбрать и обосновать способ завершения работы всех воркеров.
*/

func main() {
	// Контекст для ожидания нажатия Ctrl+C
	ctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT)
	defer cancel()

	// Создание канала
	ch := make(chan int, 100)
	// Получение количества воркеров
	var N int
	fmt.Print("Введите количество воркеров: ")
	fmt.Scan(&N)
	// WaitGroup для ожидания завершения работы воркеров
	wg := sync.WaitGroup{}
	// Создание N воркеров
	for i := 0; i < N; i++ {
		wg.Add(1)
		go worker(&wg, ch, i+1)
	}

	i := 0
	for {
		select {
		// Закрытие канала при нажатии Ctrl+C и ожидание завершения работы воркерами
		case <-ctx.Done():
			fmt.Println("Ожидание завершения работы воркерами")
			close(ch)
			wg.Wait()
			return
		// Отправка данных в канал
		default:
			i++
			ch <- i
		}
	}
}

// Воркер, который завершает работу, если канал закрыт.
// Этот способ завершения позволяет не терять данные. Если нажать Ctrl+C в момент, когда канал не пустой,
// то воркеры перед завершением дочитают канал и доделают работу. Если же использовать select,
// case <-ctx.Done() и case v := <-ch, то при нажатии Ctrl+C программа остановится, даже если в канале есть данные.
func worker(wg *sync.WaitGroup, ch chan int, n int) {
	v, ok := <-ch
	for ok {
		fmt.Printf("Воркер №%d: %d\n", n, v)
		v, ok = <-ch
	}
	fmt.Printf("Воркер №%d закончил работу\n", n)
	wg.Done()
}
