package main

import "fmt"

/*
Задание 17

Реализовать бинарный поиск встроенными методами языка.
*/

func main() {
	// Массив чисел
	array := []int{1, 2, 3, 4}
	// Вызов функции бинарного поиска с существующим элементом
	if find, err := binSearch(array, 2); err != nil {
		fmt.Println(err)
	} else {
		fmt.Println(find)
	}

	// Вызов функции бинарного поиска с не существующим элементом
	if find, err := binSearch(array, 0); err != nil {
		fmt.Println(err)
	} else {
		fmt.Println(find)
	}
}

// Функция бинарного поиска
func binSearch(array []int, key int) (int, error) {
	// Левая и правая границы массива, в который происходит поиск
	l := -1
	r := len(array)
	for l < r-1 {
		// Задается индекс центрального элемента массива
		m := (l + r) / 2
		// Если центральный элемент равен искомому, возвращается его индекс и nil вместо ошибки
		if array[m] == key {
			return m, nil
			// Если центральный элемент меньше, чем искомый, то индекс левой границы поиска меняется на индекс
			// центрального элемента и поиск продолжается в правой части массива относительно центра
		} else if array[m] < key {
			l = m
			// Если условия выше не выполнились, то индекс правой границы поиска менятеся на индекс центрального
			// элемнта и поиск продолжается в левой части массива относительно центра
		} else {
			r = m
		}
	}
	// Если искомый элемент не найден, то возвращается вместо индекса -1 и ошибка
	return -1, fmt.Errorf("number %d not found", key)
}
